'''
FinalDataPattern.py

FinalDataPattern.py uses a user-specified RPL pattern to extract data from 
a semi-structured datafile. It prints to console the percentage of lines matched in the
file by the RPL. This file is both useful extracting data quickly and for testing 
the quality of an RPL file (Whether auto-generated by Rivet or not) in terms of its matchrate.

Authors: James Baggs, Xiaoyu Chen, Yuxu Yang

Usage: python FinalDataPattern.py <filename> <RPLfilename> <RPLpatternname>
    (Program assumes RPL files are in /result/ and datafiles are in /resource/)
Example: >python FinalDataPattern.py NewDataSet.csv auto.rpl auto
Output: FILE: /result/customizedResult.json - A file of parsed JSON data using
            the Rosie library and the specified RPL
        CONSOLE: Match Percent is displayed onscreen

'''
import os, json, sys
import rosie


class FinalDataPattern:
    def __init__(self, filename, customizedRPL, rplName):
        """Initialize the variables."""
        self.filename = os.path.abspath(__file__+ "/../../") + "/resource/" + filename
        self.outputfile = os.path.abspath(__file__+ "/../../") + "/result/" + "customizedResult.json"
        self.rplFile = os.path.abspath(__file__+ "/../../") + "/result/" + customizedRPL
        self.rplName = rplName
        self.ROSIE_HOME = None
        self.Rosie = None
        self.engine = None
        self.config = None
        self.r = None
        self.tbl = None
        self.of = None
        self.list = []
        self.matchRate = 0
        self.number = 0

    def runCustomizedPattern(self):
        """Runs the program."""
        self.ROSIE_HOME = os.getenv("ROSIE_HOME")
        if not self.ROSIE_HOME:
            print "Environment variable ROSIE_HOME not set.  (Must be set to the root of the rosie directory.)"
            sys.exit(-1)

        self.Rosie = rosie.initialize(self.ROSIE_HOME, self.ROSIE_HOME + "/ffi/librosie/librosie.so")
        # print "Rosie library successfully loaded"

        self.engine = self.Rosie.engine()
        # print "Obtained a rosie matching engine:", self.engine, "with id", self.engine.id

        self.config = json.dumps({'encode': 'json'})
        self.r = self.engine.configure(self.config)
        # if not self.r: print "Engine reconfigured to look for digits\n"
        # else: print "Error reconfiguring engine!", r

        self.r = self.engine.inspect()
        # print self.r

        self.tbl = json.loads(self.r[0])
        # print "Return from inspect_engine is:", str(self.tbl)

        self.r = self.engine.load_manifest("$sys/MANIFEST")
        # for s in self.r: print s

        # Load the customized rpl file
        self.r = self.engine.load_file(self.rplFile)

        # Use the customized pattern to matach all the file
        self.config = json.dumps({'expression': self.rplName})
        self.r = self.engine.configure(self.config)
        self.number = 0
        self.matchRate = 0
        with open(self.filename) as file:  ## Data file need to analyize
            with open(self.outputfile ,
                      'w') as self.of:  ## This is the output json file that contains all pattern that matched
                for line in file:
                    self.r = self.engine.match(line, None)
                    self.print_match_results(self.r, self.of)
                    self.number += 1  ## This is just keep tracking lines numbers
                json.dump(self.list, self.of, indent=2)
                print("Data Successfully Extracted. Saved to /result/customizedResult.json")
                print "Match Rate : " + str(round(float(self.matchRate) / float(self.number) * 100, 2)) + "%"


    # Returns the Match Percent of the RPL pattern on a file (given that runCustomizedPattern has already been run)
    def getMatchPct(self):
        return (float(self.matchRate) / float(self.number))

    # Prints the match results
    def print_match_results(self, r, of):
        match = json.loads(r[0]) if r else False
        self.list.append(match)
        leftover = json.loads(r[1])
        if (leftover == 0):
            self.matchRate = self.matchRate+1
        self.list.append(leftover)


if __name__ == "__main__":
    if(sys.argv[1].upper() == "HELP"):
        print("Usage: >python FinalDataPattern.py <filename> <RPLfilename> <RPLpatternname>")
        print("Example: >python FinalDataPattern.py NewDataSet.csv auto.rpl auto")
        print("If you do not have an RPL file, first run Rivet.py to obtain one")
        exit(0)
    ## input as filename, customizedRPL, rplName
    brute = FinalDataPattern(sys.argv[1], sys.argv[2], sys.argv[3])
    brute.runCustomizedPattern()